// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package proc

import (
	"github.com/google/wire"
	"github.com/noaway/tutorial/config"
	"github.com/noaway/tutorial/internal/svc"
	"github.com/noaway/tutorial/provider"
	"github.com/noaway/tutorial/service"
	"github.com/noaway/tutorial/web"
	"github.com/sirupsen/logrus"
	"net"
	"net/http"
)

// Injectors from proc.go:

func InitWeb() (http.Handler, error) {
	userProvider := &provider.UserProvider{}
	userService := &service.UserService{
		Users: userProvider,
	}
	configuration := _wireConfigurationValue
	item := &provider.Item{
		Users: userProvider,
		Conf:  configuration,
	}
	itemService := &service.ItemService{
		Is:    item,
		Users: userProvider,
	}
	handler, err := web.InitWeb(userService, itemService)
	if err != nil {
		return nil, err
	}
	return handler, nil
}

var (
	_wireConfigurationValue = conf
)

// proc.go:

var conf = config.NewConfigure("/Users/noaway/workspace/tutorial/config.conf")

var Set = wire.NewSet(wire.Value(conf), provider.ProviderSet, wire.Struct(new(service.UserService), "Users"), wire.Struct(new(service.ItemService), "*"), web.InitWeb)

type Proc struct {
	httpService svc.HTTPService
}

func (p *Proc) Init() (e error) {
	return nil
}

func (p *Proc) Start() error {
	httpListener, err := net.Listen("tcp", conf.Server.HttpAddr)
	if err != nil {
		return err
	}
	logrus.Info("addr: ", conf.Server.HttpAddr)
	handler, err := InitWeb()
	if err != nil {
		return err
	}

	return p.httpService.Service(httpListener, handler)
}

func (p *Proc) Stop() error {
	p.httpService.Shutdown()
	return nil
}
